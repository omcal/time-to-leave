name: 'Prepare Release'
on:
  workflow_dispatch:
  push:
    tags:
      - latest/v*
      - stable/v*

jobs:

  'MacOS':
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
    - name: ' Building...'
      run: |
        npm ci
        npm run package:mac
    - name: set env
      run: |
        echo "APP_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        echo ${{ env.APP_VERSION }}
    - name: 'Packing DMG...'
      if: success()
      run: npx electron-installer-dmg 'release-builds/Time to Leave-darwin-x64/Time to Leave.app' time-to-leave --out 'packages/' --icon=assets/icon-mac.icns
    - name: 'Release to GH'
      if: success()
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: 'packages/**.dmg'
        artifactContentType: application/x-apple-diskimage
        draft: true
        tag: ${{ env.APP_VERSION }}
        token: ${{ secrets.GITHUB_TOKEN }}
        # Only update body on Release Notes Action
        omitBody: true
        omitBodyDuringUpdate: true

  'Linux':
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
    - name: ' Building...'
      run: |
        npm ci
        npm run package:deb
    - name: set env
      run: |
        echo "APP_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        echo ${{ env.APP_VERSION }}
    - name: 'Packing DEB...'
      if: success()
      run: npx electron-installer-debian --src 'release-builds/time-to-leave-linux-x64/' --dest 'packages/' --arch amd64 --verbose
    - name: 'Release to GH'
      if: success()
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: 'packages/**.deb'
        artifactContentType: application/vnd.debian.binary-package
        draft: true
        tag: ${{ env.APP_VERSION }}
        token: ${{ secrets.GITHUB_TOKEN }}
        # Only update body on Release Notes Action
        omitBody: true
        omitBodyDuringUpdate: true
    - name: 'Packing RPM'
      if: success()
      run: |
        sudo apt install -yqq rpm
        npx electron-installer-redhat --src 'release-builds/time-to-leave-linux-x64/' --dest 'packages/' --arch amd64 --verbose
    - name: 'Release to GH'
      if: success()
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: 'packages/**.rpm'
        artifactContentType: application/x-redhat-package-manager
        draft: true
        tag: ${{ env.APP_VERSION }}
        token: ${{ secrets.GITHUB_TOKEN }}
        # Only update body on Release Notes Action
        omitBody: true
        omitBodyDuringUpdate: true

  'Windows':
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
    - name: 'Building...'
      run: |
        npm ci
        npm run package:win
    - name: set env
      run: |
        echo "APP_VERSION=$(node -p "require('./package.json').version")" >> $env:GITHUB_ENV
    - name: 'Packing MSI, EXE, etc'
      if: success()
      run: npx electron-installer-windows --src 'release-builds\time-to-leave-win32-ia32\' --dest 'packages\' --verbose
    - name: 'Release MSI to GH'
      if: success()
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: 'packages/**.msi'
        artifactContentType: application/x-msi
        draft: true
        tag: ${{ env.APP_VERSION }}
        token: ${{ secrets.GITHUB_TOKEN }}
        # Only update body on Release Notes Action
        omitBody: true
        omitBodyDuringUpdate: true
    - name: 'Release EXE to GH'
      if: success()
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: 'packages/**.exe'
        artifactContentType: application/x-executable
        draft: true
        tag: ${{ env.APP_VERSION }}
        token: ${{ secrets.GITHUB_TOKEN }}
        # Only update body on Release Notes Action
        omitBody: true
        omitBodyDuringUpdate: true


  'ReleaseNotes':
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
    - name: ' Building...'
      run: |
        npm ci
    - name: set env
      run: |
        echo "APP_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        echo ${{ env.APP_VERSION }}
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Parse release information
      run: |
        python scripts/update_release.py -changelog-file changelog.md -version ${{ env.APP_VERSION }} -output-file release_notes.md
    - name: 'Release to GH'
      if: success()
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        draft: true
        tag: ${{ env.APP_VERSION }}
        token: ${{ secrets.GITHUB_TOKEN }}
        # Only update body on Release Notes Action
        bodyFile: 'release_notes.md'
